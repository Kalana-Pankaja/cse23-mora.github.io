---
// MatrixBackground.astro
// Props can be defined here if you want to customize the animation
interface Props {
    fontSize?: number;
}

const { fontSize = 16 } = Astro.props;
---

<canvas id="matrix" class="matrix-background"></canvas>

<style>
    .matrix-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
    }
</style>

<script define:vars={{ fontSize }}>
    // Get the canvas element
    const canvas = document.getElementById("matrix");
    const ctx = canvas.getContext("2d");

    // Set canvas size to window size
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Characters to use in the matrix
    const chars =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$+-*/=%\"'#&_(),.;:?!\\|{}<>[]^~";

    // Configure columns
    const columns = Math.floor(canvas.width / fontSize);

    // Array to track the y position of each drop
    const drops = [];
    for (let i = 0; i < columns; i++) {
        drops[i] = Math.floor(Math.random() * -100);
    }

    // Function to create different shades of indigo with low opacity
    function getIndigoColor(opacity) {
        const r = Math.floor(75 + Math.random() * 50);
        const g = Math.floor(0 + Math.random() * 50);
        const b = Math.floor(130 + Math.random() * 70);
        return `rgba(${r}, ${g}, ${b}, ${opacity})`;
    }

    // Draw function
    function draw() {
        // Background with semi-transparent black to create trail effect
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        ctx.fillStyle = prefersDark ?  'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Set font
        ctx.font = `${fontSize}px monospace`;

        // Loop through drops
        for (let i = 0; i < drops.length; i++) {
            // Generate a random character from the chars string
            const text = chars[Math.floor(Math.random() * chars.length)];

            // Vary the opacity based on position
            const dropPosition = drops[i] * fontSize;
            const opacity = Math.random() * 0.5 + 0.1; // Low opacity between 0.1 and 0.6

            // Set color with calculated opacity
            ctx.fillStyle = getIndigoColor(opacity);

            // Draw the character
            ctx.fillText(text, i * fontSize, dropPosition);

            // Incrementally move the drops
            drops[i]++;

            // If the drop is out of view, reset it
            if (dropPosition > canvas.height && Math.random() > 0.975) {
                drops[i] = Math.floor(Math.random() * -20);
            }
        }
    }

    // Handle window resize
    window.addEventListener("resize", () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Recalculate columns and reset drops
        const newColumns = Math.floor(canvas.width / fontSize);

        if (newColumns > drops.length) {
            // Add more drops if needed
            for (let i = drops.length; i < newColumns; i++) {
                drops[i] = Math.floor(Math.random() * -100);
            }
        } else {
            // Trim drops array if window got smaller
            drops.length = newColumns;
        }
    });

    // Run the animation
    setInterval(draw, 50);
</script>
